-- ===============================================
-- MIGRATION FIXED - Drops existing functions first
-- ===============================================

BEGIN;

-- Drop all functions that might exist
DO $$ 
DECLARE
    r RECORD;
BEGIN
    FOR r IN (
        SELECT proname, oidvectortypes(proargtypes) as args
        FROM pg_proc 
        WHERE pronamespace = 'public'::regnamespace
        AND proname IN (
            'get_or_create_client_whatsapp', 'get_client_profile', 'update_client_profile',
            'count_client_appointments', 'can_client_book', 'get_preferred_contact_method',
            'has_appointment_next_24h', 'get_service_price', 'get_service_duration',
            'get_service_details', 'search_services', 'get_services_by_category',
            'get_services_by_price_range', 'check_service_active', 'get_top_services',
            'calculate_total_duration', 'check_day_availability', 'get_business_hours',
            'get_cancellation_policy', 'get_popular_questions', 'create_knowledge_suggestion',
            'send_client_message', 'get_service_recommendations', 'get_cross_sell_recommendations',
            'check_slot_available', 'add_to_waitlist', 'get_waitlist_position',
            'get_next_waitlist_client', 'remove_from_waitlist', 'convert_waitlist_to_appointment',
            'list_waitlist_by_service', 'update_waitlist_priority', 'get_client_packages',
            'check_package_sessions_remaining', 'list_available_packages', 'check_package_validity',
            'get_package_usage_history', 'get_inventory_item', 'list_all_inventory',
            'add_inventory_item', 'update_inventory_quantity', 'register_product_sale',
            'get_low_stock_items', 'get_out_of_stock_items', 'search_inventory',
            'get_total_inventory_value', 'get_revenue_by_period', 'get_appointments_by_status',
            'get_top_clients', 'get_cancellation_rate', 'get_no_show_stats',
            'create_service', 'update_service', 'delete_service', 'search_clients',
            'list_all_clients', 'update_client_role', 'create_knowledge_article',
            'update_knowledge_article', 'delete_knowledge_article', 'review_knowledge_suggestions',
            'set_business_hours', 'update_business_settings', 'create_staff_member',
            'list_staff', 'create_client_note', 'get_client_notes', 'get_global_metrics'
        )
    ) LOOP
        EXECUTE 'DROP FUNCTION IF EXISTS public.' || r.proname || '(' || r.args || ') CASCADE';
    END LOOP;
END $$;

BEGIN;

-- ===============================================
-- SERVICE MANAGEMENT (OWNER)
-- ===============================================

-- 1. create_service
CREATE OR REPLACE FUNCTION public.create_service(
  p_name text,
  p_base_price numeric,
  p_duration_minutes int,
  p_description text DEFAULT NULL,
  p_category text DEFAULT NULL
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_service_id uuid;
  v_role text;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can create services';
  END IF;
  
  INSERT INTO public.services (
    business_id,
    name,
    description,
    base_price,
    duration_minutes,
    category,
    is_active
  ) VALUES (
    v_business_id,
    p_name,
    p_description,
    p_base_price,
    p_duration_minutes,
    p_category,
    true
  )
  RETURNING id INTO v_service_id;
  
  RETURN v_service_id;
END;
$$;

-- 2. update_service
CREATE OR REPLACE FUNCTION public.update_service(
  p_service_id uuid,
  p_updates jsonb
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can update services';
  END IF;
  
  UPDATE public.services
  SET
    name = COALESCE(p_updates->>'name', name),
    description = COALESCE(p_updates->>'description', description),
    base_price = COALESCE((p_updates->>'base_price')::numeric, base_price),
    duration_minutes = COALESCE((p_updates->>'duration_minutes')::int, duration_minutes),
    category = COALESCE(p_updates->>'category', category),
    is_active = COALESCE((p_updates->>'is_active')::boolean, is_active),
    updated_at = now()
  WHERE id = p_service_id
    AND business_id = v_business_id;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Service not found';
  END IF;
  
  RETURN jsonb_build_object('success', true, 'service_id', p_service_id);
END;
$$;

-- 3. delete_service (soft delete)
CREATE OR REPLACE FUNCTION public.delete_service(
  p_service_id uuid,
  p_soft_delete boolean DEFAULT true
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can delete services';
  END IF;
  
  IF p_soft_delete THEN
    UPDATE public.services
    SET is_active = false
    WHERE id = p_service_id
      AND business_id = v_business_id;
  ELSE
    DELETE FROM public.services
    WHERE id = p_service_id
      AND business_id = v_business_id;
  END IF;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Service not found';
  END IF;
  
  RETURN jsonb_build_object('success', true, 'service_id', p_service_id);
END;
$$;

-- ===============================================
-- CLIENT MANAGEMENT (OWNER)
-- ===============================================

-- 4. search_clients
CREATE OR REPLACE FUNCTION public.search_clients(
  p_search_query text
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can search clients';
  END IF;
  
  SELECT jsonb_agg(
    jsonb_build_object(
      'profile_id', p.id,
      'full_name', p.full_name,
      'phone_number', p.phone_number,
      'email', p.email,
      'role', p.role,
      'is_active', p.is_active
    )
  )
  INTO v_result
  FROM public.profiles p
  WHERE p.business_id = v_business_id
    AND (
      lower(p.full_name) LIKE '%' || lower(p_search_query) || '%'
      OR p.phone_number LIKE '%' || p_search_query || '%'
      OR lower(p.email) LIKE '%' || lower(p_search_query) || '%'
    )
  LIMIT 50;
  
  RETURN COALESCE(v_result, '[]'::jsonb);
END;
$$;

-- 5. list_all_clients
CREATE OR REPLACE FUNCTION public.list_all_clients(
  p_role_filter text DEFAULT NULL,
  p_include_inactive boolean DEFAULT false
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can list all clients';
  END IF;
  
  SELECT jsonb_agg(
    jsonb_build_object(
      'profile_id', p.id,
      'full_name', p.full_name,
      'phone_number', p.phone_number,
      'email', p.email,
      'role', p.role,
      'is_active', p.is_active,
      'created_at', p.created_at
    ) ORDER BY p.created_at DESC
  )
  INTO v_result
  FROM public.profiles p
  WHERE p.business_id = v_business_id
    AND (p_role_filter IS NULL OR p.role = p_role_filter)
    AND (p_include_inactive OR p.is_active = true);
  
  RETURN COALESCE(v_result, '[]'::jsonb);
END;
$$;

-- 6. update_client_role
CREATE OR REPLACE FUNCTION public.update_client_role(
  p_profile_id uuid,
  p_new_role text
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can update client roles';
  END IF;
  
  IF p_new_role NOT IN ('lead', 'owner') THEN
    RAISE EXCEPTION 'Invalid role: %', p_new_role;
  END IF;
  
  UPDATE public.profiles
  SET role = p_new_role
  WHERE id = p_profile_id
    AND business_id = v_business_id;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Profile not found';
  END IF;
  
  RETURN jsonb_build_object('success', true, 'profile_id', p_profile_id, 'new_role', p_new_role);
END;
$$;

-- ===============================================
-- KNOWLEDGE BASE MANAGEMENT (OWNER)
-- ===============================================

-- 7. create_knowledge_article
CREATE OR REPLACE FUNCTION public.create_knowledge_article(
  p_category text,
  p_question text,
  p_answer text
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_kb_id uuid;
  v_role text;
  v_user_id uuid;
BEGIN
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can create knowledge articles';
  END IF;
  
  BEGIN
    v_user_id := (auth.jwt()->>'sub')::uuid;
  EXCEPTION WHEN OTHERS THEN
    v_user_id := NULL;
  END;
  
  INSERT INTO public.knowledge_base (
    category,
    question,
    answer,
    last_modified_by
  ) VALUES (
    p_category,
    p_question,
    p_answer,
    v_user_id
  )
  RETURNING id INTO v_kb_id;
  
  RETURN v_kb_id;
END;
$$;

-- 8. update_knowledge_article
CREATE OR REPLACE FUNCTION public.update_knowledge_article(
  p_kb_id uuid,
  p_updates jsonb
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_role text;
  v_user_id uuid;
BEGIN
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can update knowledge articles';
  END IF;
  
  BEGIN
    v_user_id := (auth.jwt()->>'sub')::uuid;
  EXCEPTION WHEN OTHERS THEN
    v_user_id := NULL;
  END;
  
  UPDATE public.knowledge_base
  SET
    category = COALESCE(p_updates->>'category', category),
    question = COALESCE(p_updates->>'question', question),
    answer = COALESCE(p_updates->>'answer', answer),
    last_modified_by = v_user_id,
    updated_at = now()
  WHERE id = p_kb_id;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Knowledge article not found';
  END IF;
  
  RETURN jsonb_build_object('success', true, 'kb_id', p_kb_id);
END;
$$;

-- 9. delete_knowledge_article
CREATE OR REPLACE FUNCTION public.delete_knowledge_article(
  p_kb_id uuid
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_role text;
BEGIN
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can delete knowledge articles';
  END IF;
  
  DELETE FROM public.knowledge_base
  WHERE id = p_kb_id;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Knowledge article not found';
  END IF;
  
  RETURN jsonb_build_object('success', true, 'kb_id', p_kb_id);
END;
$$;

-- 10. review_knowledge_suggestions
CREATE OR REPLACE FUNCTION public.review_knowledge_suggestions()
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_role text;
  v_result jsonb;
BEGIN
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can review suggestions';
  END IF;
  
  SELECT jsonb_agg(
    jsonb_build_object(
      'suggestion_id', ks.id,
      'question_text', ks.question_text,
      'context', ks.context,
      'status', ks.status,
      'created_at', ks.created_at
    ) ORDER BY ks.created_at DESC
  )
  INTO v_result
  FROM public.knowledge_suggestions ks
  WHERE ks.status = 'pending';
  
  RETURN COALESCE(v_result, '[]'::jsonb);
END;
$$;

-- ===============================================
-- BUSINESS CONFIGURATION (OWNER)
-- ===============================================

-- 11. set_business_hours
CREATE OR REPLACE FUNCTION public.set_business_hours(
  p_day_of_week int,
  p_open_time time,
  p_close_time time
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can set business hours';
  END IF;
  
  IF p_day_of_week NOT BETWEEN 0 AND 6 THEN
    RAISE EXCEPTION 'Invalid day_of_week (must be 0-6)';
  END IF;
  
  INSERT INTO public.business_hours (
    business_id,
    day_of_week,
    open_time,
    close_time,
    is_closed
  ) VALUES (
    v_business_id,
    p_day_of_week,
    p_open_time,
    p_close_time,
    false
  )
  ON CONFLICT (business_id, day_of_week) 
  DO UPDATE SET
    open_time = p_open_time,
    close_time = p_close_time,
    is_closed = false;
  
  RETURN jsonb_build_object('success', true, 'day_of_week', p_day_of_week);
END;
$$;

-- 12. update_business_settings
CREATE OR REPLACE FUNCTION public.update_business_settings(
  p_settings jsonb
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can update business settings';
  END IF;
  
  INSERT INTO public.business_settings (business_id, settings)
  VALUES (v_business_id, p_settings)
  ON CONFLICT (business_id)
  DO UPDATE SET
    settings = business_settings.settings || p_settings,
    updated_at = now();
  
  RETURN jsonb_build_object('success', true);
END;
$$;

-- ===============================================
-- STAFF & RESOURCE MANAGEMENT (OWNER)
-- ===============================================

-- 13. create_staff_member
CREATE OR REPLACE FUNCTION public.create_staff_member(
  p_name text,
  p_phone text,
  p_role text,
  p_email text DEFAULT NULL
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_user_role text;
  v_profile_id uuid;
BEGIN
  v_business_id := public.get_user_business_id();
  v_user_role := auth.jwt()->>'user_role';
  
  IF v_user_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can create staff members';
  END IF;
  
  INSERT INTO public.profiles (
    business_id,
    full_name,
    phone_number,
    email,
    role,
    is_active
  ) VALUES (
    v_business_id,
    p_name,
    p_phone,
    p_email,
    'staff',
    true
  )
  RETURNING id INTO v_profile_id;
  
  RETURN v_profile_id;
END;
$$;

-- 14. list_staff
CREATE OR REPLACE FUNCTION public.list_staff(
  p_include_inactive boolean DEFAULT false
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can list staff';
  END IF;
  
  SELECT jsonb_agg(
    jsonb_build_object(
      'staff_id', p.id,
      'name', p.full_name,
      'phone', p.phone_number,
      'email', p.email,
      'is_active', p.is_active
    )
  )
  INTO v_result
  FROM public.profiles p
  WHERE p.business_id = v_business_id
    AND p.role = 'staff'
    AND (p_include_inactive OR p.is_active = true);
  
  RETURN COALESCE(v_result, '[]'::jsonb);
END;
$$;

-- 15. create_client_note
CREATE OR REPLACE FUNCTION public.create_client_note(
  p_profile_id uuid,
  p_note_text text,
  p_category text DEFAULT NULL
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
  v_note_id uuid;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can create client notes';
  END IF;
  
  -- Asumiendo tabla staff_notes existe (0107)
  INSERT INTO public.staff_notes (
    business_id,
    profile_id,
    note_text,
    note_category
  ) VALUES (
    v_business_id,
    p_profile_id,
    p_note_text,
    p_category
  )
  RETURNING id INTO v_note_id;
  
  RETURN v_note_id;
END;
$$;

-- 16. get_client_notes
CREATE OR REPLACE FUNCTION public.get_client_notes(
  p_profile_id uuid
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can view client notes';
  END IF;
  
  SELECT jsonb_agg(
    jsonb_build_object(
      'note_id', sn.id,
      'note_text', sn.note_text,
      'category', sn.note_category,
      'created_at', sn.created_at
    ) ORDER BY sn.created_at DESC
  )
  INTO v_result
  FROM public.staff_notes sn
  WHERE sn.business_id = v_business_id
    AND sn.profile_id = p_profile_id;
  
  RETURN COALESCE(v_result, '[]'::jsonb);
END;
$$;

-- 17. get_global_metrics
CREATE OR REPLACE FUNCTION public.get_global_metrics()
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can view global metrics';
  END IF;
  
  RETURN jsonb_build_object(
    'total_clients', (
      SELECT COUNT(*) FROM profiles WHERE business_id = v_business_id AND role = 'lead'
    ),
    'total_appointments', (
      SELECT COUNT(*) FROM appointments WHERE business_id = v_business_id
    ),
    'this_month_revenue', (
      SELECT COALESCE(SUM(total_price), 0)
      FROM appointments
      WHERE business_id = v_business_id
        AND status = 'completed'
        AND start_time >= date_trunc('month', now())
    ),
    'active_services', (
      SELECT COUNT(*) FROM services WHERE business_id = v_business_id AND is_active = true
    )
  );
END;
$$;

-- ===============================================
-- GRANTS
-- ===============================================
GRANT EXECUTE ON FUNCTION public.create_service(text, numeric, int, text, text) TO authenticated;
GRANT EXECUTE ON FUNCTION public.update_service(uuid, jsonb) TO authenticated;
GRANT EXECUTE ON FUNCTION public.delete_service(uuid, boolean) TO authenticated;
GRANT EXECUTE ON FUNCTION public.search_clients(text) TO authenticated;
GRANT EXECUTE ON FUNCTION public.list_all_clients(text, boolean) TO authenticated;
GRANT EXECUTE ON FUNCTION public.update_client_role(uuid, text) TO authenticated;
GRANT EXECUTE ON FUNCTION public.create_knowledge_article(text, text, text) TO authenticated;
GRANT EXECUTE ON FUNCTION public.update_knowledge_article(uuid, jsonb) TO authenticated;
GRANT EXECUTE ON FUNCTION public.delete_knowledge_article(uuid) TO authenticated;
GRANT EXECUTE ON FUNCTION public.review_knowledge_suggestions() TO authenticated;
GRANT EXECUTE ON FUNCTION public.set_business_hours(int, time, time) TO authenticated;
GRANT EXECUTE ON FUNCTION public.update_business_settings(jsonb) TO authenticated;
GRANT EXECUTE ON FUNCTION public.create_staff_member(text, text, text, text) TO authenticated;
GRANT EXECUTE ON FUNCTION public.list_staff(boolean) TO authenticated;
GRANT EXECUTE ON FUNCTION public.create_client_note(uuid, text, text) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_client_notes(uuid) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_global_metrics() TO authenticated;

COMMIT;

-- Verificación
DO $$
BEGIN
  RAISE NOTICE '✅ Migration 0306 completed successfully';
  RAISE NOTICE '📦 Functions created: 17 (OWNER ONLY)';
  RAISE NOTICE '   SERVICES: create, update, delete';
  RAISE NOTICE '   CLIENTS: search, list, update_role, notes';
  RAISE NOTICE '   KB: create, update, delete articles, review suggestions';
  RAISE NOTICE '   CONFIG: business_hours, settings';
  RAISE NOTICE '   STAFF: create, list';
  RAISE NOTICE '   METRICS: global_metrics';
END $$;
