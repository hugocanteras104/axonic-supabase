-- ===============================================
-- MIGRATION FIXED - Drops existing functions first
-- ===============================================

BEGIN;

-- Drop all functions that might exist
DO $$ 
DECLARE
    r RECORD;
BEGIN
    FOR r IN (
        SELECT proname, oidvectortypes(proargtypes) as args
        FROM pg_proc 
        WHERE pronamespace = 'public'::regnamespace
        AND proname IN (
            'get_or_create_client_whatsapp', 'get_client_profile', 'update_client_profile',
            'count_client_appointments', 'can_client_book', 'get_preferred_contact_method',
            'has_appointment_next_24h', 'get_service_price', 'get_service_duration',
            'get_service_details', 'search_services', 'get_services_by_category',
            'get_services_by_price_range', 'check_service_active', 'get_top_services',
            'calculate_total_duration', 'check_day_availability', 'get_business_hours',
            'get_cancellation_policy', 'get_popular_questions', 'create_knowledge_suggestion',
            'send_client_message', 'get_service_recommendations', 'get_cross_sell_recommendations',
            'check_slot_available', 'add_to_waitlist', 'get_waitlist_position',
            'get_next_waitlist_client', 'remove_from_waitlist', 'convert_waitlist_to_appointment',
            'list_waitlist_by_service', 'update_waitlist_priority', 'get_client_packages',
            'check_package_sessions_remaining', 'list_available_packages', 'check_package_validity',
            'get_package_usage_history', 'get_inventory_item', 'list_all_inventory',
            'add_inventory_item', 'update_inventory_quantity', 'register_product_sale',
            'get_low_stock_items', 'get_out_of_stock_items', 'search_inventory',
            'get_total_inventory_value', 'get_revenue_by_period', 'get_appointments_by_status',
            'get_top_clients', 'get_cancellation_rate', 'get_no_show_stats',
            'create_service', 'update_service', 'delete_service', 'search_clients',
            'list_all_clients', 'update_client_role', 'create_knowledge_article',
            'update_knowledge_article', 'delete_knowledge_article', 'review_knowledge_suggestions',
            'set_business_hours', 'update_business_settings', 'create_staff_member',
            'list_staff', 'create_client_note', 'get_client_notes', 'get_global_metrics'
        )
    ) LOOP
        EXECUTE 'DROP FUNCTION IF EXISTS public.' || r.proname || '(' || r.args || ') CASCADE';
    END LOOP;
END $$;

BEGIN;

-- ===============================================
-- INVENTORY FUNCTIONS
-- ===============================================

-- 1. get_inventory_item
CREATE OR REPLACE FUNCTION public.get_inventory_item(
  p_sku text
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT jsonb_build_object(
    'id', i.id,
    'sku', i.sku,
    'name', i.name,
    'description', i.description,
    'quantity', i.quantity,
    'unit_cost', i.unit_cost,
    'selling_price', i.selling_price,
    'reorder_level', i.reorder_level,
    'category', i.category,
    'total_value', i.quantity * i.unit_cost
  )
  INTO v_result
  FROM public.inventory i
  WHERE i.sku = p_sku
    AND i.business_id = v_business_id;
  
  IF v_result IS NULL THEN
    RAISE EXCEPTION 'Inventory item not found: %', p_sku;
  END IF;
  
  RETURN v_result;
END;
$$;

-- 2. list_all_inventory
CREATE OR REPLACE FUNCTION public.list_all_inventory()
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT jsonb_agg(
    jsonb_build_object(
      'id', i.id,
      'sku', i.sku,
      'name', i.name,
      'quantity', i.quantity,
      'unit_cost', i.unit_cost,
      'selling_price', i.selling_price,
      'category', i.category,
      'needs_reorder', i.quantity <= COALESCE(i.reorder_level, 0)
    ) ORDER BY i.name
  )
  INTO v_result
  FROM public.inventory i
  WHERE i.business_id = v_business_id;
  
  RETURN COALESCE(v_result, '[]'::jsonb);
END;
$$;

-- 3. add_inventory_item
CREATE OR REPLACE FUNCTION public.add_inventory_item(
  p_sku text,
  p_name text,
  p_quantity int,
  p_unit_cost numeric,
  p_selling_price numeric DEFAULT NULL,
  p_description text DEFAULT NULL,
  p_category text DEFAULT NULL,
  p_reorder_level int DEFAULT NULL
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_item_id uuid;
  v_role text;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can add inventory items';
  END IF;
  
  INSERT INTO public.inventory (
    business_id,
    sku,
    name,
    description,
    quantity,
    unit_cost,
    selling_price,
    category,
    reorder_level
  ) VALUES (
    v_business_id,
    p_sku,
    p_name,
    p_description,
    p_quantity,
    p_unit_cost,
    p_selling_price,
    p_category,
    p_reorder_level
  )
  RETURNING id INTO v_item_id;
  
  RETURN v_item_id;
END;
$$;

-- 4. update_inventory_quantity
CREATE OR REPLACE FUNCTION public.update_inventory_quantity(
  p_sku text,
  p_new_quantity int
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_role text;
BEGIN
  v_business_id := public.get_user_business_id();
  v_role := auth.jwt()->>'user_role';
  
  IF v_role != 'owner' THEN
    RAISE EXCEPTION 'Only owners can update inventory';
  END IF;
  
  UPDATE public.inventory
  SET quantity = p_new_quantity
  WHERE sku = p_sku
    AND business_id = v_business_id;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Inventory item not found: %', p_sku;
  END IF;
  
  RETURN jsonb_build_object(
    'success', true,
    'sku', p_sku,
    'new_quantity', p_new_quantity
  );
END;
$$;

-- 5. register_product_sale
CREATE OR REPLACE FUNCTION public.register_product_sale(
  p_sku text,
  p_quantity int,
  p_profile_id uuid DEFAULT NULL
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_item RECORD;
  v_total_amount numeric;
BEGIN
  v_business_id := public.get_user_business_id();
  
  -- Obtener item con lock
  SELECT * INTO v_item
  FROM public.inventory
  WHERE sku = p_sku
    AND business_id = v_business_id
  FOR UPDATE;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Inventory item not found: %', p_sku;
  END IF;
  
  IF v_item.quantity < p_quantity THEN
    RAISE EXCEPTION 'Insufficient stock for % (have %, need %)', 
      p_sku, v_item.quantity, p_quantity;
  END IF;
  
  -- Calcular total
  v_total_amount := COALESCE(v_item.selling_price, v_item.unit_cost) * p_quantity;
  
  -- Decrementar stock
  UPDATE public.inventory
  SET quantity = quantity - p_quantity
  WHERE id = v_item.id;
  
  -- Log de auditorÃ­a
  INSERT INTO public.audit_logs (business_id, profile_id, action, payload)
  VALUES (
    v_business_id,
    p_profile_id,
    'product_sale',
    jsonb_build_object(
      'sku', p_sku,
      'quantity_sold', p_quantity,
      'unit_price', COALESCE(v_item.selling_price, v_item.unit_cost),
      'total_amount', v_total_amount
    )
  );
  
  RETURN jsonb_build_object(
    'success', true,
    'sku', p_sku,
    'quantity_sold', p_quantity,
    'total_amount', v_total_amount,
    'remaining_stock', v_item.quantity - p_quantity
  );
END;
$$;

-- 6. get_low_stock_items
CREATE OR REPLACE FUNCTION public.get_low_stock_items()
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT jsonb_agg(
    jsonb_build_object(
      'sku', i.sku,
      'name', i.name,
      'quantity', i.quantity,
      'reorder_level', i.reorder_level,
      'unit_cost', i.unit_cost
    ) ORDER BY i.quantity ASC
  )
  INTO v_result
  FROM public.inventory i
  WHERE i.business_id = v_business_id
    AND i.quantity <= COALESCE(i.reorder_level, 10);
  
  RETURN COALESCE(v_result, '[]'::jsonb);
END;
$$;

-- 7. get_out_of_stock_items
CREATE OR REPLACE FUNCTION public.get_out_of_stock_items()
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT jsonb_agg(
    jsonb_build_object(
      'sku', i.sku,
      'name', i.name,
      'category', i.category
    ) ORDER BY i.name
  )
  INTO v_result
  FROM public.inventory i
  WHERE i.business_id = v_business_id
    AND i.quantity = 0;
  
  RETURN COALESCE(v_result, '[]'::jsonb);
END;
$$;

-- 8. search_inventory
CREATE OR REPLACE FUNCTION public.search_inventory(
  p_search_query text
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT jsonb_agg(
    jsonb_build_object(
      'id', i.id,
      'sku', i.sku,
      'name', i.name,
      'quantity', i.quantity,
      'unit_cost', i.unit_cost,
      'selling_price', i.selling_price
    )
  )
  INTO v_result
  FROM public.inventory i
  WHERE i.business_id = v_business_id
    AND (
      lower(i.name) LIKE '%' || lower(p_search_query) || '%'
      OR lower(i.sku) LIKE '%' || lower(p_search_query) || '%'
      OR lower(i.category) LIKE '%' || lower(p_search_query) || '%'
    );
  
  RETURN COALESCE(v_result, '[]'::jsonb);
END;
$$;

-- 9. get_total_inventory_value
CREATE OR REPLACE FUNCTION public.get_total_inventory_value()
RETURNS numeric
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_total numeric;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT COALESCE(SUM(quantity * unit_cost), 0)
  INTO v_total
  FROM public.inventory
  WHERE business_id = v_business_id;
  
  RETURN v_total;
END;
$$;

-- ===============================================
-- ANALYTICS / METRICS FUNCTIONS
-- ===============================================

-- 10. get_revenue_by_period
CREATE OR REPLACE FUNCTION public.get_revenue_by_period(
  p_start_date date,
  p_end_date date
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_revenue numeric;
  v_appointment_count int;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT 
    COALESCE(SUM(total_price), 0),
    COUNT(*)
  INTO v_revenue, v_appointment_count
  FROM public.appointments
  WHERE business_id = v_business_id
    AND status = 'completed'
    AND start_time::date BETWEEN p_start_date AND p_end_date;
  
  RETURN jsonb_build_object(
    'start_date', p_start_date,
    'end_date', p_end_date,
    'total_revenue', v_revenue,
    'completed_appointments', v_appointment_count,
    'average_per_appointment', CASE 
      WHEN v_appointment_count > 0 THEN v_revenue / v_appointment_count
      ELSE 0
    END
  );
END;
$$;

-- 11. get_appointments_by_status
CREATE OR REPLACE FUNCTION public.get_appointments_by_status(
  p_start_date date DEFAULT NULL,
  p_end_date date DEFAULT NULL
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT jsonb_object_agg(status, count)
  INTO v_result
  FROM (
    SELECT 
      status,
      COUNT(*) as count
    FROM public.appointments
    WHERE business_id = v_business_id
      AND (p_start_date IS NULL OR start_time::date >= p_start_date)
      AND (p_end_date IS NULL OR start_time::date <= p_end_date)
    GROUP BY status
  ) sub;
  
  RETURN COALESCE(v_result, '{}'::jsonb);
END;
$$;

-- 12. get_top_clients
CREATE OR REPLACE FUNCTION public.get_top_clients(
  p_limit int DEFAULT 10
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_result jsonb;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT jsonb_agg(
    jsonb_build_object(
      'profile_id', p.id,
      'name', p.full_name,
      'phone', p.phone_number,
      'total_appointments', appointment_count,
      'total_spent', total_spent
    )
  )
  INTO v_result
  FROM (
    SELECT 
      p.id,
      p.full_name,
      p.phone_number,
      COUNT(a.id) as appointment_count,
      COALESCE(SUM(a.total_price), 0) as total_spent
    FROM public.profiles p
    LEFT JOIN public.appointments a ON a.profile_id = p.id 
      AND a.status = 'completed'
    WHERE p.business_id = v_business_id
    GROUP BY p.id
    ORDER BY total_spent DESC
    LIMIT p_limit
  ) p;
  
  RETURN COALESCE(v_result, '[]'::jsonb);
END;
$$;

-- 13. get_cancellation_rate
CREATE OR REPLACE FUNCTION public.get_cancellation_rate(
  p_start_date date,
  p_end_date date
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_total int;
  v_cancelled int;
  v_rate numeric;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT 
    COUNT(*),
    COUNT(*) FILTER (WHERE status = 'cancelled')
  INTO v_total, v_cancelled
  FROM public.appointments
  WHERE business_id = v_business_id
    AND start_time::date BETWEEN p_start_date AND p_end_date;
  
  v_rate := CASE 
    WHEN v_total > 0 THEN (v_cancelled::numeric / v_total) * 100
    ELSE 0
  END;
  
  RETURN jsonb_build_object(
    'period', jsonb_build_object('start', p_start_date, 'end', p_end_date),
    'total_appointments', v_total,
    'cancelled_appointments', v_cancelled,
    'cancellation_rate_percent', ROUND(v_rate, 2)
  );
END;
$$;

-- 14. get_no_show_stats
CREATE OR REPLACE FUNCTION public.get_no_show_stats(
  p_start_date date DEFAULT NULL,
  p_end_date date DEFAULT NULL
)
RETURNS jsonb
LANGUAGE plpgsql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_business_id uuid;
  v_total int;
  v_no_shows int;
  v_rate numeric;
BEGIN
  v_business_id := public.get_user_business_id();
  
  SELECT 
    COUNT(*),
    COUNT(*) FILTER (WHERE metadata->>'no_show' = 'true')
  INTO v_total, v_no_shows
  FROM public.appointments
  WHERE business_id = v_business_id
    AND (p_start_date IS NULL OR start_time::date >= p_start_date)
    AND (p_end_date IS NULL OR start_time::date <= p_end_date);
  
  v_rate := CASE 
    WHEN v_total > 0 THEN (v_no_shows::numeric / v_total) * 100
    ELSE 0
  END;
  
  RETURN jsonb_build_object(
    'total_appointments', v_total,
    'no_shows', v_no_shows,
    'no_show_rate_percent', ROUND(v_rate, 2)
  );
END;
$$;

-- ===============================================
-- GRANTS
-- ===============================================
GRANT EXECUTE ON FUNCTION public.get_inventory_item(text) TO authenticated;
GRANT EXECUTE ON FUNCTION public.list_all_inventory() TO authenticated;
GRANT EXECUTE ON FUNCTION public.add_inventory_item(text, text, int, numeric, numeric, text, text, int) TO authenticated;
GRANT EXECUTE ON FUNCTION public.update_inventory_quantity(text, int) TO authenticated;
GRANT EXECUTE ON FUNCTION public.register_product_sale(text, int, uuid) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_low_stock_items() TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_out_of_stock_items() TO authenticated;
GRANT EXECUTE ON FUNCTION public.search_inventory(text) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_total_inventory_value() TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_revenue_by_period(date, date) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_appointments_by_status(date, date) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_top_clients(int) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_cancellation_rate(date, date) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_no_show_stats(date, date) TO authenticated;

COMMIT;

-- VerificaciÃ³n
DO $$
BEGIN
  RAISE NOTICE 'â Migration 0305 completed successfully';
  RAISE NOTICE 'ð¦ Functions created: 14 (9 inventory + 5 analytics)';
  RAISE NOTICE '   INVENTORY: get, list, add, update, sale, low_stock, out_of_stock, search, total_value';
  RAISE NOTICE '   ANALYTICS: revenue, by_status, top_clients, cancellation_rate, no_show_stats';
END $$;
